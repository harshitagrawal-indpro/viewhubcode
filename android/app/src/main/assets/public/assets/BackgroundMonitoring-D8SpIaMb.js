var d=Object.defineProperty;var u=(c,t,i)=>t in c?d(c,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):c[t]=i;var n=(c,t,i)=>u(c,typeof t!="symbol"?t+"":t,i);import{s as a}from"./index-DCvLPWGS.js";const r=class r{constructor(){n(this,"userId",null);n(this,"userGroups",[]);n(this,"schedules",[]);n(this,"isActiveStatus",!1);n(this,"currentUsageSession",null);n(this,"activityTimeout",null);n(this,"networkCheckInterval",null);n(this,"scheduleCheckInterval",null);n(this,"isNetworkConnected",!0);n(this,"screenActiveTime",0);n(this,"lastActivityTime",Date.now())}static getInstance(){return r.instance||(r.instance=new r),r.instance}async initialize(t,i){this.userId=t,this.userGroups=i,this.isActiveStatus=!0,console.log("Background monitoring initialized for enhanced monitoring"),await this.loadSchedules(),this.startNetworkMonitoring(),this.startActivityMonitoring(),this.startScheduleChecking()}async loadSchedules(){if(this.userGroups.length!==0)try{const t=this.userGroups.map(s=>s.id),{data:i,error:e}=await a.from("schedules").select("*").in("group_id",t);if(e)throw e;this.schedules=i||[],console.log("Loaded schedules:",this.schedules)}catch(t){console.error("Error loading schedules:",t)}}startNetworkMonitoring(){this.networkCheckInterval=setInterval(async()=>{const t=this.isNetworkConnected;this.isNetworkConnected=navigator.onLine,!t&&this.isNetworkConnected&&(console.log("Network reconnected - checking if monitoring should start"),await this.checkAndStartMonitoring()),t&&!this.isNetworkConnected&&(console.log("Network disconnected - ending current session"),await this.handleActivityEnd())},5e3),window.addEventListener("online",async()=>{console.log("Online event - network connected"),this.isNetworkConnected=!0,await this.checkAndStartMonitoring()}),window.addEventListener("offline",async()=>{console.log("Offline event - network disconnected"),this.isNetworkConnected=!1,await this.handleActivityEnd()})}startActivityMonitoring(){if(typeof window>"u")return;const t=["mousedown","mousemove","keypress","scroll","touchstart","click"],i=()=>{const e=Date.now();this.lastActivityTime=e;const s=e-this.lastActivityTime;s<1e3?this.screenActiveTime+=s:this.screenActiveTime=0,this.screenActiveTime>15e3&&this.isNetworkConnected&&(this.handleViolation(),this.screenActiveTime=0),this.activityTimeout&&clearTimeout(this.activityTimeout),this.activityTimeout=setTimeout(()=>{this.handleActivityEnd()},5e3)};t.forEach(e=>{document.addEventListener(e,i,{passive:!0})}),window.backgroundMonitoringCleanup=()=>{t.forEach(e=>{document.removeEventListener(e,i)}),this.activityTimeout&&clearTimeout(this.activityTimeout)}}startScheduleChecking(){this.scheduleCheckInterval=setInterval(async()=>{await this.checkAndStartMonitoring()},3e4)}async checkAndStartMonitoring(){!this.shouldMonitorNow()||!this.isNetworkConnected||this.currentUsageSession||await this.handleActivityStart()}async handleViolation(){if(!(!this.shouldMonitorNow()||!this.isNetworkConnected))try{const t=this.getCurrentActiveGroup();if(!t)return;const{data:i,error:e}=await a.from("mobile_usage").insert({user_id:this.userId,group_id:t.id,start_time:new Date(Date.now()-15e3).toISOString(),end_time:new Date().toISOString(),duration:15}).select().single();if(e)throw e;console.log("Violation recorded:",i.id),"Notification"in window&&Notification.permission==="granted"&&new Notification("ViewHub Violation",{body:"Screen active for more than 15 seconds during monitoring period",icon:"/favicon.ico"})}catch(t){console.error("Error recording violation:",t)}}async handleActivityStart(){if(!(!this.shouldMonitorNow()||!this.isNetworkConnected))try{if(this.currentUsageSession)return;const t=this.getCurrentActiveGroup();if(!t)return;const{data:i,error:e}=await a.from("mobile_usage").insert({user_id:this.userId,group_id:t.id,start_time:new Date().toISOString(),end_time:null,duration:null}).select().single();if(e)throw e;this.currentUsageSession=i.id,console.log("Started monitoring session:",i.id)}catch(t){console.error("Error starting monitoring session:",t)}}async handleActivityEnd(){if(this.currentUsageSession)try{const t=new Date().toISOString(),{data:i,error:e}=await a.from("mobile_usage").select("start_time").eq("id",this.currentUsageSession).single();if(e)throw e;const s=new Date(i.start_time),o=Math.floor((new Date().getTime()-s.getTime())/1e3),{error:h}=await a.from("mobile_usage").update({end_time:t,duration:o}).eq("id",this.currentUsageSession);if(h)throw h;console.log("Ended monitoring session:",this.currentUsageSession,"Duration:",o),this.currentUsageSession=null}catch(t){console.error("Error ending monitoring session:",t),this.currentUsageSession=null}}shouldMonitorNow(){if(!this.isActiveStatus||this.schedules.length===0)return!1;const t=new Date,i=t.getDay(),e=t.toTimeString().slice(0,8);return this.schedules.some(o=>o.day_of_week===i&&!o.is_break&&e>=o.start_time&&e<=o.end_time)}getCurrentActiveGroup(){return this.userGroups.length>0?this.userGroups[0]:null}async checkSchedules(){await this.loadSchedules(),await this.checkAndStartMonitoring()}async refreshSchedules(){await this.loadSchedules()}isActive(){return this.isActiveStatus}async stop(){this.isActiveStatus=!1,this.currentUsageSession&&await this.handleActivityEnd(),this.networkCheckInterval&&(clearInterval(this.networkCheckInterval),this.networkCheckInterval=null),this.scheduleCheckInterval&&(clearInterval(this.scheduleCheckInterval),this.scheduleCheckInterval=null),typeof window<"u"&&window.backgroundMonitoringCleanup&&window.backgroundMonitoringCleanup(),console.log("Background monitoring stopped")}};n(r,"instance");let l=r;export{l as BackgroundMonitoring};
